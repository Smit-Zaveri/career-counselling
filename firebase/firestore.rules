rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Applications collection rules
    match /applications/{applicationId} {
      allow create: if request.auth != null;
      allow read: if true;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Saved Jobs collection rules
    match /saved_jobs/{jobId} {
      allow create: if request.auth != null;
      allow read: if true;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /community_images/{imageId} {
      allow write: if request.auth != null;
      allow read: if true;
    }

    // Allow reading for most collections
    match /{allPaths=**} {
      allow read: if true;
    }

    // Users collection
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Communities collection - enhanced rules
    match /communities/{communityId} {
      // Allow anyone to read communities
      allow read: if true;

      // Allow creation if authenticated
      allow create: if request.auth != null;

      // Allow updates with proper permission checks
      allow update: if request.auth != null && (
        // Creator can update anything
        resource.data.createdBy == request.auth.uid ||

        // Members can modify their own membership
        (
          // Only allow changes to members field
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
          (
            // Check if trying to join (user not in banned list if it exists)
            (
              request.resource.data.members.hasAll(resource.data.members) &&
              (!('bannedMembers' in resource.data) ||
               !resource.data.bannedMembers.hasAny([request.auth.uid]))
            ) ||

            // Or check if trying to leave (removing own ID)
            (
              resource.data.members.hasAll(request.resource.data.members) &&
              resource.data.members.hasAny([request.auth.uid]) &&
              !request.resource.data.members.hasAny([request.auth.uid])
            )
          )
        )
      );

      // Allow deletion only by the creator
      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }

    // Community Messages collection
    match /communityMessages/{messageId} {
      allow read: if true;
      allow create: if request.auth != null &&
        exists(/databases/$(database)/documents/communities/$(request.resource.data.communityId)) &&
        get(/databases/$(database)/documents/communities/$(request.resource.data.communityId))
          .data.members.hasAny([request.auth.uid]);
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Add system messages collection with more permissive rules
    match /systemMessages/{messageId} {
      allow read: if true;
      // Allow creation of system messages by any authenticated user
      allow create: if request.auth != null;
      allow update, delete: if false;
    }

    // Community Reports collection for rule violations
    match /communityReports/{reportId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.reportedBy ||
        get(/databases/$(database)/documents/communities/$(resource.data.communityId)).data.createdBy == request.auth.uid
      );
      allow create: if request.auth != null;
      allow update, delete: if false;
    }

    // Notifications collection rules
    match /notifications/{notificationId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Counselors collection - allow authenticated users to update for bookings
    match /counselors/{counselorId} {
      allow read: if true;
      // Allow authenticated users to update bookedSlots array
      allow update: if request.auth != null && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['bookedSlots']) &&
        request.resource.data.bookedSlots.size() == resource.data.bookedSlots.size() + 1;
    }

    // Base rule - deny by default (must be last)
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
